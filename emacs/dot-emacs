;; -*- coding: utf-8; mode: lisp -*-

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t)
 '(menu-bar-mode nil)
 '(package-selected-packages
   '(multiple-cursors company projectile flycheck flx-ido editorconfig)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(defun ensure-directory (dir)
  (when (not (file-directory-p dir))
    (make-directory dir :parent)
    (message "Created missing directory: %s" dir))
  dir)

(set-default-coding-systems 'utf-8)
(setq-default indent-tabs-mode nil) ; never use tabs!
(delete-selection-mode)
(tool-bar-mode -1)

(setq gc-cons-threshold (* 100 1024 1024) ; run GC every 100 megs
      read-process-output-max (* 1024 1024) ; 1mb
      debug-on-error t ; stack trace on errors
      backup-by-copying t ; don't clobber symlinks
      backup-directory-alist `(("." . ,(ensure-directory (concat user-emacs-directory "backup-files")))) ; don't litter my fs tree
      auto-save-file-name-transforms `((".*" ,(ensure-directory (concat user-emacs-directory "auto-save-files/")) t))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t ; use versioned backups
      line-number-mode t ; show line numbers
      column-number-mode t ; show column numbers
      visible-bell t
      )

(when (string= system-type "darwin")
  (setq dired-use-ls-dired nil))

;; package management
(require 'cl-lib)
(require 'package)
(package-initialize)

(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/"))

(defvar my-packages
  '(ace-window company projectile flycheck flx-ido editorconfig lsp-mode lsp-pyright yaml-mode multiple-cursors magit)
  "A list of packages to ensure are installed at launch.")

(defun my-packages-installed-p ()
  (cl-loop for p in my-packages
           when (not (package-installed-p p)) do (cl-return nil)
           finally (cl-return t)))

(unless (my-packages-installed-p)
  ;; check for new packages (package versions)
  (package-refresh-contents)
  ;; install the missing packages
  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p))))

;; theme
(load-theme 'tango-dark t)
(if (string= system-type "darwin")
    (progn
      (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font Mono-12"))
      (set-frame-font "FiraCode Nerd Font Mono-12" nil t))
  (progn
    (add-to-list 'default-frame-alist '(font . "Fira Code-10"))
    (set-frame-font "Fira Code-10" nil t)))

;; ace-windows
(global-set-key (kbd "M-o") 'ace-window)
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
(setq aw-scope 'frame)

;; lsp-mode
(setq lsp-keymap-prefix "C-c l")
(require 'lsp-mode)
(add-hook 'python-mode-hook (lambda ()
                              (require 'lsp-pyright)
                              (lsp-deferred)))
(add-hook 'c-mode-hook 'lsp-deferred)
(add-hook 'c++-mode-hook 'lsp-deferred)
(add-hook 'objc-mode-hook 'lsp-deferred)

(setq lsp-clients-clangd-args
          '("-j=2"
            "--background-index"
            "--clang-tidy"
            "--completion-style=bundled"
            "--pch-storage=memory"
            "--header-insertion=iwyu"
            "--header-insertion-decorators=1"))

(setq lsp-file-watch-threshold 1000
      company-idle-delay 0.0
      company-minimum-prefix-length 1
      lsp-idle-delay 0.1)
(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.venv\\'"))

;; multiple-cursors
(require 'multiple-cursors)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;; editorconfig
(require 'editorconfig)
(editorconfig-mode 1)

;; enable flx-ido
(require 'flx-ido)
(ido-mode t)
(ido-everywhere t)
(flx-ido-mode 1)
(setq flx-ido-threshold 10000)
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)

;; Display ido results vertically, rather than horizontally
(setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))

(defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
(add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)
(defun ido-define-keys () ;; C-n/p is more intuitive in vertical layout
  (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
  (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
(add-hook 'ido-setup-hook 'ido-define-keys)

;; always use flycheck
(add-hook 'after-init-hook 'global-flycheck-mode)

;; always use company mode
(add-hook 'after-init-hook 'global-company-mode)

;; always use projectile
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

;; single window mode and double window mode
(defun sw ()
  (interactive)
  (delete-other-windows)
  (set-frame-size (selected-frame) 80 65))

(defun dw ()
  (interactive)
  (delete-other-windows)
  (set-frame-size (selected-frame) 167 65)
  (split-window (selected-window) 85 t))

;; Clear whitespace on save
(add-hook 'before-save-hook 'whitespace-cleanup)

;; Use xdg-open to open URLs
(setq browse-url-browser-function 'browse-url-xdg-open)

;; Clear echo area
(princ "" t)
