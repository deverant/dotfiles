;; -*- coding: utf-8; mode: lisp -*-

(setq custom-file (concat user-emacs-directory "customizations.el"))
(load custom-file t)

(defun ensure-directory (dir)
  (when (not (file-directory-p dir))
    (make-directory dir :parent)
    (message "Created missing directory: %s" dir))
  dir)

(set-default-coding-systems 'utf-8)

(add-to-list 'load-path (ensure-directory (concat user-emacs-directory "lisp")))

(tool-bar-mode -1)
(menu-bar-mode -1)

;; I've started to like tabs in my C code, so let's see if I can live
;; with this setting on and disabling it for specific modes where
;; needed.
(setq-default indent-tabs-mode t)
(setq c-ts-mode-indent-style "linux")
(setq c-ts-mode-indent-offset 8)

(setq gc-cons-threshold (* 100 1024 1024) ; run GC every 100 megs
      read-process-output-max (* 1024 1024) ; 1mb
      debug-on-error t ; stack trace on errors
      backup-by-copying t ; don't clobber symlinks
      backup-directory-alist `(("." . ,(ensure-directory (concat user-emacs-directory "backup-files")))) ; don't litter my fs tree
      auto-save-file-name-transforms `((".*" ,(ensure-directory (concat user-emacs-directory "auto-save-files/")) t))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t ; use versioned backups
      line-number-mode t ; show line numbers
      column-number-mode t ; show column numbers
      visible-bell t
      )

(global-set-key (kbd "C-x m") 'man)

;; add unique part of buffer name to the beginning
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

;; don't hide the frame
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-x C-z"))

(when (string= system-type "darwin")
  (setq dired-use-ls-dired nil)
  ;; don't accidentally kill windows
  (global-unset-key (kbd "s-w"))
  (defun delete-frame-or-kill-terminal ()
    "Delete the selected frame.  If the last one, kill Emacs."
    (interactive)
    (condition-case nil (delete-frame) (error (save-buffers-kill-terminal))))
  (global-set-key (kbd "s-q") 'delete-frame-or-kill-terminal))

;; package management
(require 'cl-lib)
(require 'package)
(package-initialize)

(add-to-list 'package-archives
	     '("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives
	     '("nongnu" . "https://elpa.nongnu.org/nongnu/"))

;; refresh the package listing in the background
(package-refresh-contents t)

(defvar my-packages
  '(flx-ido
    multiple-cursors
    graphviz-dot-mode)
  "A list of packages to ensure are installed at launch.")

(defun my-packages-installed-p ()
  (cl-loop for p in my-packages
	   when (not (package-installed-p p)) do (cl-return nil)
	   finally (cl-return t)))

(unless (my-packages-installed-p)
  ;; check for new packages (package versions)
  (package-refresh-contents)
  ;; install the missing packages
  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p))))

;; theme
(load-theme 'tango-dark t)
(if (string= system-type "darwin")
    (progn
      (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font Mono-12"))
      (set-frame-font "FiraCode Nerd Font Mono-12" nil t))
  (progn
    (add-to-list 'default-frame-alist '(font . "Fira Code-10"))
    (set-frame-font "Fira Code-10" nil t)))

;; tree-sitter
(setq treesit-language-source-alist
   '((c "https://github.com/tree-sitter/tree-sitter-c" "v0.20.7")
     (cpp "https://github.com/tree-sitter/tree-sitter-cpp" "v0.20.5")
     (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")))

(cl-loop for lang in treesit-language-source-alist
	 when (not (treesit-language-available-p (car lang)))
	 do (treesit-install-language-grammar (car lang)))

(add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
(add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
(add-to-list 'major-mode-remap-alist '(c-or-c++-mode . c-or-c++-ts-mode))

(add-to-list 'auto-mode-alist '("Dockerfile" . dockerfile-ts-mode))

;; eglot
(require 'eglot)
(setq eglot-autoshutdown t) ;; kill buffer after last buffer

(add-hook 'c-ts-mode-hook 'eglot-ensure)
(add-hook 'c++-ts-mode-hook 'eglot-ensure)
(add-hook 'python-ts-mode-hook 'eglot-ensure)
(add-hook 'go-ts-mode-hook 'eglot-ensure)

(global-set-key (kbd "C-c l f") 'eglot-format)
(global-set-key (kbd "C-c l r") 'eglot-rename)
(global-set-key (kbd "C-c l q") 'eglot-code-action-quickfix)

;; multiple-cursors
(require 'multiple-cursors)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;; enable flx-ido
(require 'flx-ido)
(ido-mode t)
(ido-everywhere t)
(flx-ido-mode 1)
(setq flx-ido-threshold 10000)
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)

;; Display ido results vertically, rather than horizontally
(setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))

(defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
(add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)
(defun ido-define-keys () ;; C-n/p is more intuitive in vertical layout
  (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
  (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
(add-hook 'ido-setup-hook 'ido-define-keys)

;; graphviz-dot-ode
(require 'graphviz-dot-mode)
(setq graphviz-dot-indent-width 4)
(add-hook 'graphviz-dot-mode-hook 'company-mode)
(setq graphviz-dot-preview-extension "svg")

;; org-babel dot support
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  (not (string= lang "dot")))  ;don't ask for dot
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

;; Clear whitespace on save
(add-hook 'before-save-hook 'whitespace-cleanup)

;; Use xdg-open to open URLs
(setq browse-url-browser-function 'browse-url-xdg-open)

;; idomenu
(autoload 'idomenu "idomenu" nil t)
(global-set-key (kbd "C-c l i") 'idomenu)

;; bats-mode
(require 'bats-mode)

;; packages
(use-package ace-window
    :ensure t
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-scope 'frame)
    :bind ("M-o" . ace-window))

(use-package projectile
    :ensure t
    :pin melpa-stable
    :init (projectile-mode +1)
    :bind (:map projectile-mode-map ("C-c p" . projectile-command-map))
    :delight '(:eval (concat " [" (projectile-project-name) "]")))

(use-package company
    :ensure t
    :init (global-company-mode)
    :delight)

(use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

(use-package editorconfig
    :ensure t
    :config (editorconfig-mode 1))

(use-package magit
    :ensure t)

(use-package delight
    :ensure t)

(use-package which-key
    :ensure t
    :delight
    :custom (which-key-idle-delay 3)
    :config (which-key-mode))

(use-package yaml-mode
    :ensure t)

(use-package treemacs
    :ensure t
    :defer t
    :config
    (treemacs-project-follow-mode t)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    :bind
    (:map global-map
	  ("M-0" . treemacs-select-window)
	  ("C-x t t" . treemacs))
)

(use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

(use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

;; Clear echo area
(princ "" t)
